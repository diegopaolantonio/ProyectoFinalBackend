paths:
  /api/v1/users/:
    get:
      summary: Obtiene todos los usuarios. Solo responde a una sesion con un usuario Admin.
      tags:
        - Users
      responses:
        "200":
          description: Array de usuarios recibido con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al obtener el array de usuarios de la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
    post:
      summary: Agrega un usuario a la base de datos. Solo un usuario Admin puede agregar usuarios.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/postUser"
      responses:
        "200":
          description: Usuario agregado.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al agregar usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
    delete:
      summary: Elimina usuarios existentes correspondientes a una inactividad de 2 dias. Solo un usuario Admin puede eliminar un usuario.
      tags:
        - Users
      responses:
        "200":
          description: Usuarios eliminados con exito.
        "400":
          description: Usuario no encontrado.
        "404":
          description: Sin autorizacion para elminar el usuario.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/{email}:
    get:
      summary: Obtiene usuario corresontiente a un email especifico.
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Usuario recibido con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al obtener el array de usuarios de la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/{uid}:
    get:
      summary: Obtiene el usuario correspondiente a un email especifico.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Usuario recibido con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al obtener el usuario de la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
    put:
      summary: Actualiza un usuario a la base de datos. Solo un usuario Admin puede actializar usuarios.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/postUser"
      responses:
        "200":
          description: Usuario modificado con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al agregar usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
    delete:
      summary: Elimina usuario existentes correspondiente a un Id especifico. Solo un usuario Admin puede eliminar un usuario.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Usuario eliminado con exito.
        "400":
          description: Usuario no encontrado.
        "404":
          description: Sin autorizacion para elminar el usuario.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/{uid}/detail:
    put:
      summary: Actualiza un usuario a la base de datos, con un id especifico. Solo un usuario Admin puede actializar usuarios.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/postUser"
      responses:
        "200":
          description: Usuario modificado con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al agregar usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/{uid}/documents:
    post:
      summary: Actualiza los documentos de un usuario a la base de datos con Multer.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/documentUser"
      responses:
        "200":
          description: Documento agregado/actualizado con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al agregar documento al usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/{uid}/profiles:
    post:
      summary: Actualiza foto de perfil un usuario a la base de datos con Multer.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/postUser"
      responses:
        "200":
          description: Usuario modificado con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al agregar foto de perfil usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/premium/{uid}:
    put:
      summary: Actualiza el role de un usuario a la base de datos. Solo se actualiza si se verificaron los 3 documentos cargados.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Role de usuario modificado con exito.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Users"
        "400":
          description: Error al verificar documentos del usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/restorePasswordRequest/{uid}:
    post:
      summary: Pedido para restaurar contraseña a un usuario en la base de datos. Solo si no hay un usuario logueado.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Pedido de restauracion de contraseña con exito.
        "400":
          description: Error al pedir la restauracion de contraseña.
        "500":
          description: Error de comunicacion con la base de datos.
  /api/v1/users/restorePassword/{uid}:
    post:
      summary: Restauracion de contraseña a un usuario a la base de datos. Solo si no hay un usuario logueado.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario a buscar.
          schema:
            $type: String
      responses:
        "200":
          description: Restauracion de contraseña de usuario con exito.
        "400":
          description: Error al restaurar contraseña de usuario a la base de datos.
        "500":
          description: Error de comunicacion con la base de datos.
components:
  schemas:
    Users:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado por mongo.
        first_name:
          type: String
          required: true
          description: Nombre del usuario.
        last_name:
          type: String
          description: Apellido del usuario.
        email:
          type: String
          required: true
          unique: true
          description: Email del usuario.
        age:
          type: Number
          description: Edad del usuario.
        cart:
          type: ObjectId
          unique: true
          description: Id autogenerado del carrito asignado.
        role:
          type: String
          description: Role del usuario pude ser "user", "premium" o "admin".
        profile:
          type: String
          description: URL de la foto de perfil.
        documents:
          type: Array
          description: Documentos del usuario carga la url de "identificacion", "domicilio", "cuenta".
          items:
            $ref: "#components/requestBodies/documentUser"
        verified_documentation:
          type: String
          description: Indica el estado de carga de la documentacion "none", "partial" o "complete".
        last_connection:
          type: Date
          description: Ultima fecha de conexion del usuario.
      example:
        _id: ObjectId("s5a46dfas4df6asdfasdf45asf")
        first_name: "Julio"
        last_name: "Cesar"
        email: "julio_cesar@correo.com"
        age: 25
        cart: ObjectId("s5asdasg6asdfasdfdfdfdsasf")
        role: "user"
        profile: "http://localhost:8080/documents/1692403627937-perfil.png"
        documents:
          0:
            name: "http://localhost:8080/documents/1692403627937-identificacion.png"
            reference: "identificacion"
          1:
            name: "http://localhost:8080/documents/1692403627937-domicilio.png"
            reference: "domicilio"
          2:
            name: "http://localhost:8080/documents/1692403627937-cuenta.png"
            reference: "cuenta"
        verified_documentation: "complete"
        last_connection: 2023-08-31T10:41:07.717+00:00
  requestBodies:
    postUser:
      type: object
      properties:
        first_name:
          type: String
          required: true
          description: Nombre del usuario.
        last_name:
          type: String
          description: Apellido del usuario.
        email:
          type: String
          required: true
          unique: true
          description: Email del usuario.
        age:
          type: Number
          description: Edad del usuario.
        cart:
          type: ObjectId
          unique: true
          description: Id autogenerado del carrito asignado.
        role:
          type: String
          description: Role del usuario pude ser "user", "premium" o "admin".
        verified_documentation:
          type: String
          description: Indica el estado de carga de la documentacion "none", "partial" o "complete".
      example:
        first_name: "Julio"
        last_name: "Cesar"
        email: "julio_cesar@correo.com"
        age: 25
        cart: ObjectId("s5asdasg6asdfasdfdfdfdsasf")
        role: "user"
        verified_documentation: "complete"
  documentUser:
    type: Array
    properties:
      name:
        type: String
        description: URL de la documentacion de "identificacion", domicilio" y "cuenta".
      reference:
        type: String
        description: identificacion de que documento es "identificacion", domicilio" y "cuenta".
      example:
        name: http://localhost:8080/documents/1692403627937-identificacion.png
        reference: identificacion
